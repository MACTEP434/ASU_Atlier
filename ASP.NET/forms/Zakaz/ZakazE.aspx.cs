/*flexberryautogenerated="true"*/

using System.Linq;
using ICSSoft.STORMNET.Business;
using ICSSoft.STORMNET.Business.LINQProvider;

namespace IIS.АСУ_Ателье
{
    using System.Collections.Generic;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.Tools;

    public partial class ЗаказE : BaseEditForm<Заказ>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ЗаказE()
            : base(Заказ.Views.ЗаказE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Zakaz/ZakazE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
            ctrlДатаЗакрытия.Enabled = false;
            ctrlМастер.Enabled = false;
            ctrlДатаЗакрытия.OnlyDate = false;
            ctrlКодЗаказа.Enabled = false;
            ctrlДатаПоступления.OnlyDate = false;
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            ctrlМастер.AddMasterLookup(ctrlКлиент, ctrlКлиентChange);

            if (ctrlСтатусЗаказа.SelectedIndex == 2)
            {
                ctrlСтатусЗаказа.Enabled = false;
            }

            if (IsPostBack)
            {
                Page.Validate();
            }
        }
        private void ctrlКлиентChange(string masterSelectedPk, ref string selectedPk, List<MasterLookup> masterEditors)
        {
            if (string.IsNullOrEmpty((masterSelectedPk)))
            {
                selectedPk = string.Empty;
                return;
            }

            var ds = (SQLDataService)DataServiceProvider.DataService;
            var approveKind = ds.Query<Клиент>(Клиент.Views.КлиентE).First(v => v.__PrimaryKey.ToString() == masterSelectedPk);
            selectedPk = approveKind.Мастер.__PrimaryKey.ToString();
        }
        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}